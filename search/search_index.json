{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Raspirri Server","text":"<p>This is a Smart Irrigation System based on Raspberry Pi.</p>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#raspirriv1","title":"RaspirriV1","text":"<p>MIT License</p> <p>Copyright (c) 2023, Marios Karagiannopoulos</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>Attribution Requirement: When using or distributing the software, an attribution to Marios Karagiannopoulos must be included.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>MIT License</p> <p>Copyright (c) 2023, Marios Karagiannopoulos</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>Attribution Requirement: When using or distributing the software, an attribution to Marios Karagiannopoulos must be included.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/#raspirri.main_app.BleData","title":"<code>BleData</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Ble data model</p> Source code in <code>raspirri/main_app.py</code> <pre><code>class BleData(BaseModel):\n    \"\"\"Ble data model\"\"\"\n\n    page: Optional[int] = None\n    refresh: Optional[bool] = None\n    wifi_data: Optional[WifiData] = None\n</code></pre>"},{"location":"api/#raspirri.main_app.GlobalVars","title":"<code>GlobalVars</code>","text":"<p>Global Variables</p> Source code in <code>raspirri/main_app.py</code> <pre><code>class GlobalVars:\n    \"\"\"Global Variables\"\"\"\n\n    def __init__(self):\n        self._refresh_set = True  # Use a private attribute with a leading underscore\n\n    @property\n    def refresh_set(self):\n        \"\"\"Getter\"\"\"\n        return self._refresh_set\n\n    @refresh_set.setter\n    def refresh_set(self, value):\n        \"\"\"Setter\"\"\"\n        # Add any additional validation or logic as needed\n        self._refresh_set = value\n</code></pre>"},{"location":"api/#raspirri.main_app.GlobalVars.refresh_set","title":"<code>refresh_set</code>  <code>property</code> <code>writable</code>","text":"<p>Getter</p>"},{"location":"api/#raspirri.main_app.ValveData","title":"<code>ValveData</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Valve data model</p> Source code in <code>raspirri/main_app.py</code> <pre><code>class ValveData(BaseModel):\n    \"\"\"Valve data model\"\"\"\n\n    status: str = None\n    valve: str = None\n</code></pre>"},{"location":"api/#raspirri.main_app.WifiData","title":"<code>WifiData</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Wifi data model</p> Source code in <code>raspirri/main_app.py</code> <pre><code>class WifiData(BaseModel):\n    \"\"\"Wifi data model\"\"\"\n\n    ssid: str = None\n    wifi_key: str = None\n</code></pre>"},{"location":"api/#raspirri.main_app.check_mqtt","title":"<code>check_mqtt()</code>  <code>async</code>","text":"<p>Save Check MQTT API call.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.get(\"/api/check_mqtt\")\nasync def check_mqtt():\n    \"\"\"Save Check MQTT API call.\"\"\"\n    try:\n        if not Mqtt().is_running():\n            Mqtt().start_mqtt_thread()\n            return JSONResponse(status_code=status.HTTP_200_OK, content={\"detail\": \"MQTT thread just started!\"})\n        return JSONResponse(status_code=status.HTTP_200_OK, content={\"detail\": \"MQTT thread was already running!\"})\n    except Exception as ex:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(ex)) from ex\n</code></pre>"},{"location":"api/#raspirri.main_app.discover_wifi","title":"<code>discover_wifi(chunked=None, page=None)</code>  <code>async</code>","text":"<p>WIFI discovery API call.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.get(\"/api/discover_wifi\")\nasync def discover_wifi(chunked: int = None, page: int = None):\n    \"\"\"WIFI discovery API call.\"\"\"\n    try:\n        if chunked is not None:\n            if page is None:\n                return JSONResponse(status_code=status.HTTP_200_OK, content=services.discover_wifi_networks(chunked))\n            return JSONResponse(status_code=status.HTTP_200_OK, content=services.discover_wifi_networks(chunked, page))\n        return JSONResponse(status_code=status.HTTP_200_OK, content=services.discover_wifi_networks())\n    except Exception as ex:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(ex)) from ex\n</code></pre>"},{"location":"api/#raspirri.main_app.index","title":"<code>index()</code>  <code>async</code>","text":"<p>Healthcheck API.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.get(\"/api\")\n@app.get(\"/api/health\")\nasync def index():\n    \"\"\"Healthcheck API.\"\"\"\n    if Mqtt().is_healthy() is True:\n        return JSONResponse(status_code=status.HTTP_200_OK, content={\"message\": \"RaspirriV1 Web Services API is Healthy!\"})\n    return JSONResponse(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, content={\"message\": \"RaspirriV1 Web Services API is NOT Healthy!\"}\n    )\n</code></pre>"},{"location":"api/#raspirri.main_app.main","title":"<code>main()</code>","text":"<p>The main function is the entry point of the program. It initializes the logger, parses command line arguments, and executes different commands based on the provided argument.</p> <p>:return: None</p> Source code in <code>raspirri/main_app.py</code> <pre><code>def main():\n    \"\"\"\n    The main function is the entry point of the program.\n    It initializes the logger, parses command line arguments, and executes different commands based on the provided argument.\n\n    :return: None\n    \"\"\"\n\n    try:\n        os.remove(RPI_SERVER_INIT_FILE)\n        logger.info(f\"The file {RPI_SERVER_INIT_FILE} has been deleted successfully.\")\n    except FileNotFoundError:\n        logger.warning(f\"The file {RPI_SERVER_INIT_FILE} does not exist.\")\n    except PermissionError:\n        logger.warning(f\"You don't have permission to delete the file {RPI_SERVER_INIT_FILE}.\")\n    except Exception as e:\n        logger.warning(f\"An error occurred: {e}\")\n\n    try:\n        logger.info(\"Initializing main...\")\n        logger.debug(\"Setting timezone to UTC\")\n        subprocess.run([\"/usr/bin/timedatectl\", \"set-timezone\", \"UTC\"], check=True)\n\n        # Remove the default handler\n        logger.remove()\n        # Assuming 'LOGLEVEL' is set in the environment variables\n        log_level = os.environ.get(\"LOGLEVEL\", \"DEBUG\")\n        # Only add the logger once\n        logger.add(\n            sys.stdout,\n            colorize=True,\n            format=\"&lt;green&gt;{time:YYYY-MM-DDTHH:mm:ss.SSS}&lt;/green&gt; | &lt;level&gt;{level}&lt;/level&gt; \\\n                | &lt;yellow&gt;{module}:{function}:{line}&lt;/yellow&gt; | &lt;level&gt;{message}&lt;/level&gt;\",\n            level=log_level,\n        )\n\n        args = parse_arguments()\n        if args.command == \"ble\":\n            init_ble()\n        elif args.command == \"mqtt\":\n            Helpers().load_toggle_statuses_from_file()\n            setup_gpio()\n            mqtt_instance = Mqtt()\n            mqtt_instance.start_mqtt_thread()\n            logger.debug(f\"Waiting to initialize MQTT client..........{mqtt_instance.client}\")\n            while mqtt_instance.client is None:\n                logger.debug(\"Waiting to initialize MQTT client...\")\n                time.sleep(1)\n            logger.debug(f\"MQTT client initialized: {mqtt_instance.client}\")\n            # signal.signal(signal.SIGTERM, lambda signum, frame: Mqtt.on_shutdown(Mqtt.client, None, None))\n            # signal.signal(signal.SIGINT, Mqtt.on_shutdown(Mqtt.client, None, None))\n            web_thread = Thread(target=web_server(), daemon=True, name=\"Web_Main_Thread\")\n            web_thread.start()\n        elif args.command == \"arch\":\n            logger.debug(f\"CPU Architecture: {get_machine_architecture()}\")\n            return\n        else:\n            raise argparse.ArgumentError(None, f\"No such argument: {args.command}\")\n    except argparse.ArgumentError as ex:\n        logger.error(f\"No such argument: {ex}\")\n        sys.exit(1)\n    except Exception as ex:\n        logger.error(f\"Exception: {ex}\")\n        sys.exit(2)\n</code></pre>"},{"location":"api/#raspirri.main_app.parse_arguments","title":"<code>parse_arguments()</code>","text":"<p>Parse the command line arguments provided to the script.</p> <p>Returns:</p> Type Description <p>argparse.Namespace: The parsed command line arguments,</p> <p>with the value of the \"command\" argument accessible through the <code>command</code> attribute.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>def parse_arguments():\n    \"\"\"\n    Parse the command line arguments provided to the script.\n\n    Returns:\n        argparse.Namespace: The parsed command line arguments,\n        with the value of the \"command\" argument accessible through the `command` attribute.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"command\", choices=[\"ble\", \"mqtt\"], help=\"The command to execute\")\n    return parser.parse_args()\n</code></pre>"},{"location":"api/#raspirri.main_app.read_ble_data","title":"<code>read_ble_data(page=None)</code>  <code>async</code>","text":"<p>BLE read data API call.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.get(\"/api/read_ble_data\")\nasync def read_ble_data(page: int = None):\n    \"\"\"BLE read data API call.\"\"\"\n    try:\n        logger.debug(f\"page: {page}\")\n        wifi_networks = services.discover_wifi_networks(1, page, global_vars.refresh_set)\n        logger.info(f\"wifi_networks: {wifi_networks}\")\n        if not wifi_networks:\n            wifi_networks = \"No wifi networks identified!\"\n        return JSONResponse(status_code=status.HTTP_200_OK, content=wifi_networks)\n    except Exception as exception:\n        logger.error(f\"Error: {exception}\")\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(exception)) from Exception\n</code></pre>"},{"location":"api/#raspirri.main_app.resource_not_found","title":"<code>resource_not_found(request, exc)</code>  <code>async</code>","text":"<p>Not found error.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.exception_handler(status.HTTP_404_NOT_FOUND)\nasync def resource_not_found(request: Request, exc: HTTPException):\n    \"\"\"Not found error.\"\"\"\n    logger.error(f\"Request: {request}\")\n    return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content={\"detail\": str(exc.detail)})\n</code></pre>"},{"location":"api/#raspirri.main_app.save_wifi","title":"<code>save_wifi(data)</code>  <code>async</code>","text":"<p>Save WIFI API call.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.post(\"/api/save_wifi\")\nasync def save_wifi(data: WifiData):\n    \"\"\"Save WIFI API call.\"\"\"\n    try:\n        if data.ssid and data.wifi_key:\n            return JSONResponse(status_code=status.HTTP_200_OK, content=services.save_wifi_network(data.ssid, data.wifi_key))\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=\"Invalid request\")\n    except Exception as ex:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(ex)) from ex\n</code></pre>"},{"location":"api/#raspirri.main_app.setup_gpio","title":"<code>setup_gpio()</code>","text":"<p>Setup GPIO.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>def setup_gpio():\n    \"\"\"Setup GPIO.\"\"\"\n    if ARCH == \"arm\":\n        GPIO.setwarnings(False)\n        # Use physical pin numbers\n        GPIO.cleanup()\n        GPIO.setmode(GPIO.BOARD)\n        # Set up header pin 11 (GPIO17) as an output\n        GPIO.setup(11, GPIO.OUT)\n</code></pre>"},{"location":"api/#raspirri.main_app.startup_event","title":"<code>startup_event()</code>  <code>async</code>","text":"<p>Code to execute after the server is up and running.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.on_event(\"startup\")\nasync def startup_event():\n    \"\"\"Code to execute after the server is up and running.\"\"\"\n    logger.info(f\"Creating a new file (or overwriting existing content): {RPI_SERVER_INIT_FILE}\")\n    with open(RPI_SERVER_INIT_FILE, \"w\", encoding=\"utf-8\") as file:\n        file.write(\"Initialized\")\n</code></pre>"},{"location":"api/#raspirri.main_app.turn","title":"<code>turn(data)</code>  <code>async</code>","text":"<p>Save Turn on/off API call.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.post(\"/api/turn\")\nasync def turn(data: ValveData):\n    \"\"\"Save Turn on/off API call.\"\"\"\n    try:\n        logger.debug(f\"data:{data}\")\n        if data.status is not None and data.valve is not None:\n            status_value = strtobool(data.status)\n            if status_value:\n                return JSONResponse(status_code=status.HTTP_200_OK, content={\"message\": services.turn_on_from_program(data.valve)})\n            return JSONResponse(status_code=status.HTTP_200_OK, content={\"message\": services.turn_off_from_program(data.valve)})\n        logger.error(f\"Invalid data: status={data.status}, valve={data.valve}\")\n        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=INVALID_DATA)\n    except (ValueError, PydanticValidationError) as exc:\n        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=INVALID_DATA) from exc\n    except Exception as ex:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(ex)) from ex\n</code></pre>"},{"location":"api/#raspirri.main_app.web_server","title":"<code>web_server()</code>","text":"<p>FastAPI Web Server.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>def web_server():\n    \"\"\"FastAPI Web Server.\"\"\"\n    try:\n        uvicorn.run(app, host=\"0.0.0.0\", port=5000, ssl_keyfile=\"certs/key.pem\", ssl_certfile=\"certs/cert.pem\", lifespan=\"on\")\n    except Exception as ex:\n        logger.error(f\"Error occured: {ex}\")\n</code></pre>"},{"location":"api/#raspirri.main_app.write_ble_data","title":"<code>write_ble_data(data)</code>  <code>async</code>","text":"<p>BLE write data API call.</p> Source code in <code>raspirri/main_app.py</code> <pre><code>@app.post(\"/api/write_ble_data\")\nasync def write_ble_data(data: BleData):\n    \"\"\"BLE write data API call.\"\"\"\n    try:\n        if data.page is not None:\n            logger.debug(f\"Page set: {data.page}\")\n            return JSONResponse(status_code=status.HTTP_200_OK, content={\"page\": data.page})\n        if data.refresh is not None:\n            global_vars.refresh_set = data.refresh\n            logger.debug(f\"refresh: {global_vars.refresh_set}\")\n            return JSONResponse(status_code=status.HTTP_200_OK, content={\"refresh\": global_vars.refresh_set})\n        if data.wifi_data.ssid and data.wifi_data.wifi_key:\n            connected = Helpers().store_wpa_ssid_key(data.wifi_data.ssid, data.wifi_data.wifi_key)\n            logger.info(f\"Wifi changed: {data}. Connected: {connected}\")\n            return JSONResponse(status_code=status.HTTP_200_OK, content={\"connected\": connected})\n        raise HTTPException(status_code=400, detail=\"Invalid request: Missing required parameters\")\n    except (ValueError, PydanticValidationError) as exc:\n        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=INVALID_DATA) from exc\n    except Exception as ex:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=\"Internal server error: \" + str(ex)) from ex\n</code></pre>"},{"location":"api/#raspirri.main_watchdog.check_health","title":"<code>check_health(endpoint)</code>","text":"<p>Check the health of an API endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The URL of the API endpoint to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the API endpoint returns a 200 status code, False otherwise.</p> Source code in <code>raspirri/main_watchdog.py</code> <pre><code>def check_health(endpoint) -&gt; bool:\n    \"\"\"\n    Check the health of an API endpoint.\n\n    Args:\n        endpoint (str): The URL of the API endpoint to check.\n\n    Returns:\n        bool: True if the API endpoint returns a 200 status code, False otherwise.\n    \"\"\"\n    try:\n        logger.info(f\"Checking HTTP request: {endpoint}\")\n        response = requests.get(endpoint, verify=False)\n        return response.status_code == status.HTTP_200_OK\n    except Exception as reqex:\n        logger.error(f\"Error HTTP request: {reqex}\")\n    return False\n</code></pre>"},{"location":"api/#raspirri.main_watchdog.check_process","title":"<code>check_process(process_name)</code>","text":"<p>Check if a process is running.</p> <p>Parameters:</p> Name Type Description Default <code>process_name</code> <code>str</code> <p>The name of the process to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the process is running, False otherwise.</p> Source code in <code>raspirri/main_watchdog.py</code> <pre><code>def check_process(process_name) -&gt; bool:\n    \"\"\"\n    Check if a process is running.\n\n    Args:\n        process_name (str): The name of the process to check.\n\n    Returns:\n        bool: True if the process is running, False otherwise.\n    \"\"\"\n    try:\n        logger.info(f\"Checking process_name: {process_name}\")\n        subprocess.check_output([\"systemctl\", \"is-active\", process_name])\n        return True\n    except subprocess.CalledProcessError as calex:\n        logger.error(f\"Error subprocess: {calex}\")\n        return False\n</code></pre>"},{"location":"api/#raspirri.main_watchdog.main","title":"<code>main()</code>","text":"<p>Main function for the watchdog script.</p> <p>Monitors a process and an API endpoint, restarts the process if necessary, and triggers a reboot if the API health check consistently fails.</p> Source code in <code>raspirri/main_watchdog.py</code> <pre><code>def main():\n    \"\"\"\n    Main function for the watchdog script.\n\n    Monitors a process and an API endpoint, restarts the process if necessary,\n    and triggers a reboot if the API health check consistently fails.\n    \"\"\"\n    process_name = \"rpi_server.service\"\n    health_check_endpoint = \"https://localhost:5000/api/health\"\n\n    retries = 0\n\n    while True:\n        if not check_process(process_name):\n            logger.debug(f\"Restarting {process_name}\")\n            restart_process(process_name)\n            retries = 0\n        else:\n            if not check_health(health_check_endpoint):\n                retries += 1\n                logger.debug(f\"Health check failed ({retries}/{MAX_RETRIES})\")\n                if retries &gt;= MAX_RETRIES:\n                    reboot_machine()\n            else:\n                retries = 0\n\n        time.sleep(CHECK_INTERVAL)\n</code></pre>"},{"location":"api/#raspirri.main_watchdog.reboot_machine","title":"<code>reboot_machine()</code>","text":"<p>Reboot the machine using sudo reboot.</p> Source code in <code>raspirri/main_watchdog.py</code> <pre><code>def reboot_machine():\n    \"\"\"Reboot the machine using sudo reboot.\"\"\"\n    logger.debug(\"Rebooting the machine...\")\n    subprocess.run([\"sudo\", \"reboot\"], check=True)\n</code></pre>"},{"location":"api/#raspirri.main_watchdog.restart_process","title":"<code>restart_process(process_name)</code>","text":"<p>Restart a process using systemd.</p> <p>Parameters:</p> Name Type Description Default <code>process_name</code> <code>str</code> <p>The name of the process to restart.</p> required Source code in <code>raspirri/main_watchdog.py</code> <pre><code>def restart_process(process_name):\n    \"\"\"\n    Restart a process using systemd.\n\n    Args:\n        process_name (str): The name of the process to restart.\n    \"\"\"\n    try:\n        logger.info(f\"Restart process_name: {process_name}\")\n        subprocess.run([\"systemctl\", \"restart\", process_name], check=True)\n    except subprocess.CalledProcessError as calex:\n        logger.error(f\"Error subprocess: {calex}\")\n</code></pre>"}]}